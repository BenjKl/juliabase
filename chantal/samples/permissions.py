#!/usr/bin/env python
# -*- coding: utf-8 -*-

u"""Central permission checking.  This module consists of three parts: First,
the exceptions that are raised if a certain permission condition is not met.
Secondly, the assertion functions that test for certain permissions.  And
thirdly, top-level code that generates a ``has_permission_to_...`` function for
every ``assert_can_...`` function.

The idea is the following.  For example, there is a function called
``assert_can_view_sample``.  If the user can't view the sample, a
``PermissionViewSampleError`` is raised.  Sometimes however, you just want to
check it without having to catch an exception.  Then, you use
``has_permission_to_view_sample``.  The parameters are the same but instead of
raising an exception, it returns ``True`` or ``False``.

The ``assert_can_...`` function are typically used at the beginning of views
where permissions need to be checked and every failure means an error.  By
contrast, the ``has_permission_to_...`` functions are used where a missing
permission just means that e.g. a link is not generated (for example, in the
``get_additional_template_context`` methods in the models).
"""

from django.utils.translation import ugettext as _
# Attention! This is a cyclic import.  Don't use models in top-level code.
from chantal.samples import models

class PermissionError(Exception):
    u"""Common base class for all permission exceptions.  It should never be
    instantiated itself.

    Note that I store much in instance attributes.  For example, the user whose
    permissions are not enough should be the currently logged-in user anyway,
    so it seems to be superfluous to store it in an attribute, too.  The sample
    is true for ``message`` (generated by calling the inherited contructor) and
    some attributes stored by derived classes.  However, you never know, and I
    like fat exception objects.

    :ivar action: the full description of the action which failed.  It should
      start with a capital letter and end with a full stop.  For example, it
      may contain ``"Viewing sample 01B-410."``.  Typically, this is generated
      by the exception's class constructor.

    :ivar reason: the full reason why the permission was missing.  It should be
      a complete sentence, starting with a capital letter and ending with a
      full stop.  It should address the user directly.  For example, it may
      contain ``"You are not in group “SiC”."``.  Avoid giving more information
      here than the user is allowed to know.  Typically, this is generated by
      the assertion function.

    :type action: unicode
    :type reason: unicode
    """
    def __init__(self, user, partial_description, reason):
        self.description = _(u"You are not allowed to %s.") % partial_description
        super(PermissionError, self).__init__(_(u"%(description)s  Reason: %(reason)s") %
                                              {"description": self.description, "reason": reason})
        self.user, self.reason = user, reason

class PermissionViewSampleError(PermissionError):
    def __init__(self, user, sample, reason):
        super(PermissionViewSampleError, self).__init__(user, _(u"view sample %s") % sample, reason)
        self.sample = sample

def assert_can_view_sample(user, sample):
    if not user.has_perm("samples.can_view_all_samples") and sample.group not in user.groups.all() \
            and sample.currently_responsible_person != user:
        raise PermissionViewSampleError(user, sample, _(u"You are not in the sample's group, nor are you its currently "
                                                        u"responsible person, nor are you a senior user."))


def generate_permission_function(assert_func):
    def has_permission(*args, **keyw):
        try:
            assert_func(*args, **keyw)
        except PermissionError:
            return False
        else:
            return True
    return has_permission
import copy, inspect
_globals = copy.copy(globals())
all_assertion_functions = [func for func in _globals.values()
                           if inspect.isfunction(func) and func.__name__.startswith("assert_can_")]
for func in all_assertion_functions:
    new_name = "has_permission_to_" + func.__name__[len("assert_can_"):]
    globals()[new_name] = generate_permission_function(func)
