.. -*- mode: rst; coding: utf-8; ispell-local-dictionary: "british" -*-
..
.. This file is part of JuliaBase, the samples database.
..
.. Copyright © 2008–2014 Forschungszentrum Jülich, Germany,
..                       Marvin Goblet <m.goblet@fz-juelich.de>,
..                       Torsten Bronger <t.bronger@fz-juelich.de>
..
.. You must not use, install, pass on, offer, sell, analyse, modify, or
.. distribute this software without explicit permission of the copyright
.. holder.  If you have received a copy of this software without the explicit
.. permission of the copyright holder, you must destroy it immediately and
.. completely.

==================
Sample names
==================


The naming scheme for samples is an inportant aspect of your samples database.
In order to support you with that, JuliaBase allows the definition of so-called
name formats.  These are string patterns that describe all valid sample names.
They are defined in :file:`settings.py` like this::

    SAMPLE_NAME_FORMATS = {
        "provisional": {"possible renames": {"new"}},

        "old": {"pattern": re.compile(r"\d\d[A-Z]-\d{3,4}([-A-Za-z_/][-A-Za-z_/0-9#()]*)?$"),
                "possible renames": {"new"}},
        "new": {"pattern": re.compile(r"""(((?P<current_year>\d\d)-
                                            (?P<user_initials>[A-Z]{2}\d{,2}|[A-Z]{3}\d?|[A-Z]{4}))|
                                           (?P<external_contact_initials>[A-Z]{2}\d\d|[A-Z]{3}\d|[A-Z]{4}))
                                          -[-A-Za-z_/0-9#()]+$""", re.VERBOSE)}
    }

In this example, three name formats are defined, namely “provisional”, “old”,
and “new”.  They are mapped to dictionaries which contain their properties.


Name format properties
==========================

``"pattern"``
-------------

This is an ``re.RegexObject`` instance containing the pattern for this name
format.  This pattern is a regular expression and should match sample names of
this format *and only these*.  In other words, every sample name should be
identified unambiguously with a name format.  It is highly senseful to end the
pattern with ``$`` to assure that the whole name is matched.

You can use some so-called “named groups” in the regular expression that are
interpreted by JuliaBase to enforce additional constraints to new sample
names.  These are:

``current_year``
    the current year as a four- or two-digit number

``user_initials``
    the initials of the currently logged-in user

``external_contact_initials``
    the initials of an external contact (a.k.a. external operator)

``combined_initials``
    any of the initials above


``"possible renames"``
------------------------

Default: ``set()`` (empty set)

This is a set containing all name formats into which this name format can be
renamed by the user.  Of course, Python code can rename a sample to anything --
although it will cause trouble if the new name is not matched by any name
format.  However, this property sets limits to what the *user* can *explicitly*
do.  In the JulaBase code, it affects the bulk-rename view as well as the
split-and-rename view.  And you may enforce it in your own code.

``"verbose name"``
--------------------

This propety contains a human-friendly name for the format name.  You should
enclose it with ``_("...")`` to make it translatable.


Provisional sample names
============================

There is a special name format in JuliaBase called “provisional”.  It has a
fixed pattern ``r"\*\d{5}$"`` and a default verbose name.  It is used for newly
created samples and usually immediately replaced by something real in the “bulk
rename” view.  You should never use a provisional name outside JuliaBase,
e.g. on sample boxes, in lab notebooks, or emails!  And, you should never allow
renaming of any format into provisional names.  In other words, one should get
rid of a provisional name as quickly as possible.


Initials
=======

Initials are a way to generate namespaces for samples.  This way, name
collisions may be prevented.  For example, the probability that the researcher
John Doe and the researcher Paula Poe both call their sample “sample-1” is
pretty high.  However, if they use their initials somewhere in the sample name,
the samples may be called “JD-sample-1” and “PP-sample-1”; problem solved.

When it comes to choosing initials, JuliaBase follows the first come first
served principle.


Name prefix templates
========================

In the bulk rename sample view (the view to which the user is redirected after
having created new samples, in order to give them a name), the user can select
a name prefix, which is then prepended to every new name.  This is partly for
convenience and partly for name policy enforcement.  With the setting
``NAME_PREFIX_TEMPLATES``, you can configure this behaviour::

    NAME_PREFIX_TEMPLATES = ("{short_year}-{user_initials}-", "{external_contact_initials}-")

This example defines two prefixes.  You may use the following placeholders in
the templates:

``{year}``
    the current four-digit year

``{short_year}``
    the current two-digit year

``{user_initials}``
    the initials of the currently logged-in user

``{external_contact_initials}``
    the initials of any external contact of the currently logged-in user

You may also add the empty string ``""`` as a template.  Then, the user may
also choose to not use any prefix, and the new names are taken as is.
